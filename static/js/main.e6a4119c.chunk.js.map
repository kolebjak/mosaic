{"version":3,"sources":["modules/routes/index.ts","modules/preview/reducer.ts","modules/preview/constants.ts","modules/gallery/reducer.ts","modules/gallery/constants.ts","getStore.ts","modules/utils/index.ts","modules/preview/actions.ts","modules/upload/saga.ts","modules/upload/constants.ts","modules/fetcher/index.ts","modules/preview/saga.ts","modules/gallery/actions.ts","modules/gallery/saga.ts","modules/home/components/HomePage.tsx","modules/upload/components/UploadPage.tsx","modules/upload/actions.ts","modules/preview/components/Canvas.tsx","modules/preview/components/PreviewPage.tsx","modules/gallery/components/Image.tsx","modules/gallery/components/GalleryPage.tsx","modules/app/App.tsx","index.tsx","getSaga.ts","modules/app/actions.ts","modules/app/constants.ts"],"names":["Routes","initialState","previewImageSrc","undefined","isLoading","sharedImage","state","action","type","selectPreviewImageSrc","previewReducer","selectSharedImage","selectIsLoading","gallery","page","pageSize","lastLoadedPageNumber","selectGallery","galleryReducer","slice","selectGallerySize","length","selectPage","selectPageSize","selectLastLoadedPageNumber","selectGalleryIsLoading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","isResponseSuccessfull","response","success","readAsDataURL","file","fr","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","getAverageColor","imageData","data","rgb","red","green","blue","i","resolution","width","height","loadImage","imageSrc","a","image","Image","crossOrigin","src","setPreviewImageSrcAction","setIsLoadingAction","uploadImage","saga","call","put","push","preview","console","error","message","takeLatest","fetcher","url","method","headers","body","fetch","JSON","stringify","raw","json","apiPath","fetchGallery","postImage","base64Image","shareImage","setGalleryAction","fetchGalleryAction","setGalleryIsLoadingAction","selectImage","setPage","select","lastLoadedPage","currentPage","filter","animated","imageUrl","gallerySize","UploadPage","onSubmit","e","preventDefault","target","files","props","this","accept","name","React","connect","Canvas","canvas","loading","setImageIntoCanvas","context","getContext","setIsLoading","Math","floor","drawImage","setMosaicToCanvas","sx","row","getImageData","avg","clearedSquare","createImageData","putImageData","beginPath","arc","CIRCLE_SIZE","PI","fillStyle","fill","setState","share","toDataURL","replace","generate","setTimeout","nextProps","shareIsLoading","Group","onClick","href","link","rel","spinning","ref","useState","style","overflow","alt","onLoad","GalleryPage","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","key","id","disabled","theme","selectedKeys","mode","to","home","upload","exact","path","component","HomePage","PreviewPage","history","createHistory","store","sagaMiddleware","createSagaMiddleware","router","routerMiddleware","createStore","combineReducers","connectRouter","rootReducer","applyMiddleware","runSaga","run","getStore","rootSaga","fork","uploadSaga","previewSaga","gallerySaga","sagas","ReactDOM","App","document","getElementById","dispatch"],"mappings":"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","file":"static/js/main.e6a4119c.chunk.js","sourcesContent":["export enum Routes {\n  home = '/',\n  selectImage = '/select-image',\n  upload= '/upload',\n  preview= '/preview',\n}\n","import { Image, State } from '../../types';\nimport { Action } from './actions';\nimport { SET_PREVIEW_IMAGE_SRC, SET_SHARED_IMAGE, SET_IS_LOADING } from './constants';\n\nexport type Reducer = {\n  previewImageSrc?: string,\n  isLoading: boolean,\n  sharedImage?: Image,\n};\n\nconst initialState: Reducer = {\n  previewImageSrc: undefined,\n  isLoading: false,\n  sharedImage: undefined,\n};\n\nexport default (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_PREVIEW_IMAGE_SRC: {\n      const { previewImageSrc } = action;\n      return {...state, previewImageSrc, sharedImage: undefined };\n    }\n    case SET_IS_LOADING: {\n      const { isLoading } = action;\n      return {...state, isLoading };\n    }\n    case SET_SHARED_IMAGE: {\n      const { sharedImage } = action;\n      return {...state, sharedImage };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const selectPreviewImageSrc = (state: State) => state.previewReducer.previewImageSrc;\nexport const selectSharedImage = (state: State) => state.previewReducer.sharedImage;\nexport const selectIsLoading = (state: State) => state.previewReducer.isLoading;\n","export type SET_PREVIEW_IMAGE_SRC = 'SET_PREVIEW_IMAGE_SRC';\nexport const SET_PREVIEW_IMAGE_SRC: SET_PREVIEW_IMAGE_SRC = 'SET_PREVIEW_IMAGE_SRC';\n\nexport type SHARE_IMAGE = 'SHARE_IMAGE';\nexport const SHARE_IMAGE: SHARE_IMAGE = 'SHARE_IMAGE';\n\nexport type SET_SHARED_IMAGE = 'SET_SHARED_IMAGE';\nexport const SET_SHARED_IMAGE: SET_SHARED_IMAGE = 'SET_SHARED_IMAGE';\n\nexport type SET_IS_LOADING = 'SET_IS_LOADING';\nexport const SET_IS_LOADING: SET_IS_LOADING = 'SET_IS_LOADING';\n","import { Gallery, State } from '../../types';\nimport { Action } from './actions';\nimport {SET_GALLERY, SET_GALLERY_IS_LOADING, SET_LAST_LOADED_PAGE, SET_PAGE} from './constants';\n\nexport type Reducer = {\n  gallery: Gallery,\n  page: number,\n  pageSize: number,\n  lastLoadedPageNumber: number,\n  isLoading: boolean,\n};\n\nconst initialState: Reducer = {\n  gallery: [],\n  page: 1,\n  pageSize: 10,\n  lastLoadedPageNumber: 0,\n  isLoading: false,\n};\n\nexport default (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_GALLERY: {\n      const { gallery } = action;\n      return { ...state, gallery: [ ...state.gallery, ...gallery ] };\n    }\n    case SET_PAGE: {\n      const { page } = action;\n      return { ...state, page };\n    }\n    case SET_LAST_LOADED_PAGE: {\n      const { lastLoadedPageNumber } = action;\n      return { ...state, lastLoadedPageNumber };\n    }\n    case SET_GALLERY_IS_LOADING: {\n      const { isLoading } = action;\n      return { ...state, isLoading };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const selectGallery = (state: State) => {\n  const { page, pageSize } = state.galleryReducer;\n  return state.galleryReducer.gallery.slice((page - 1) * pageSize, page * pageSize);\n};\nexport const selectGallerySize = (state: State) => state.galleryReducer.gallery.length;\nexport const selectPage = (state: State) => state.galleryReducer.page;\nexport const selectPageSize = (state: State) => state.galleryReducer.pageSize;\nexport const selectLastLoadedPageNumber = (state: State) => state.galleryReducer.lastLoadedPageNumber;\nexport const selectGalleryIsLoading = (state: State) => state.galleryReducer.isLoading;\n","export type FETCH_GALLERY = 'FETCH_GALLERY';\nexport const FETCH_GALLERY: FETCH_GALLERY = 'FETCH_GALLERY';\n\nexport type SET_GALLERY = 'SET_GALLERY';\nexport const SET_GALLERY: SET_GALLERY = 'SET_GALLERY';\n\nexport type SELECT_IMAGE = 'SELECT_IMAGE';\nexport const SELECT_IMAGE: SELECT_IMAGE = 'SELECT_IMAGE';\n\nexport type SET_PAGE = 'SET_PAGE';\nexport const SET_PAGE: SET_PAGE = 'SET_PAGE';\n\nexport type SET_LAST_LOADED_PAGE = 'SET_LAST_LOADED_PAGE';\nexport const SET_LAST_LOADED_PAGE: SET_LAST_LOADED_PAGE = 'SET_LAST_LOADED_PAGE';\n\nexport type SET_GALLERY_IS_LOADING = 'SET_GALLERY_IS_LOADING';\nexport const SET_GALLERY_IS_LOADING: SET_GALLERY_IS_LOADING = 'SET_GALLERY_IS_LOADING';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { History } from 'history';\nimport previewReducer from './modules/preview/reducer';\nimport galleryReducer from './modules/gallery/reducer';\n\n// tslint:disable-next-line\ndeclare const window: any;\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = (history: History) => combineReducers({\n  router: connectRouter(history),\n  previewReducer,\n  galleryReducer,\n});\nexport default (history: History) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const router = routerMiddleware(history);\n  return {\n    ...createStore(\n      rootReducer(history),\n      composeEnhancers(\n        applyMiddleware(sagaMiddleware),\n        applyMiddleware(router),\n      )),\n    runSaga: sagaMiddleware.run,\n  };\n};\n","export const isResponseSuccessfull = (response: { success: boolean }) => {\n  if (response && response.success) {\n    return true;\n  }\n  return false;\n};\n\nexport const readAsDataURL = (file: File) => {\n  const fr = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    fr.onerror = () => {\n      fr.abort();\n      reject(new DOMException('Error reading file.'));\n    };\n\n    fr.onload = () => {\n      resolve(fr.result);\n    };\n    fr.readAsDataURL(file);\n  });\n};\n\n/** Get average color of image */\nexport const getAverageColor = (imageData: ImageData) => {\n  const data = imageData.data;\n  const rgb = { red: 0, green: 0, blue: 0 };\n  for (let i = 0; i < data.length; i += 4) {\n    rgb.red += data[i];\n    rgb.green += data[i + 1];\n    rgb.blue += data[i + 2];\n  }\n  const resolution = imageData.width * imageData.height;\n  return {\n    red: rgb.red / resolution,\n    green: rgb.green / resolution,\n    blue: rgb.blue / resolution,\n  };\n};\n\nexport const loadImage = async (imageSrc: string) => new Promise<HTMLImageElement>((resolve) => {\n  const image = new Image();\n  image.crossOrigin = 'Anonymous';\n  image.src = imageSrc;\n  image.onload = () => {\n    resolve(image);\n  };\n});\n","import { SET_PREVIEW_IMAGE_SRC, SHARE_IMAGE, SET_SHARED_IMAGE, SET_IS_LOADING } from './constants';\nimport { Image } from '../../types';\n\nexport type SetPreviewImageSrcAction = (previewImageSrc: string) => SetPreviewImageSrcActionResponse;\nexport type SetPreviewImageSrcActionResponse = {\n  type: SET_PREVIEW_IMAGE_SRC,\n  previewImageSrc: string,\n};\n\nexport const setPreviewImageSrcAction: SetPreviewImageSrcAction = (previewImageSrc: string) => ({\n  type: SET_PREVIEW_IMAGE_SRC,\n  previewImageSrc,\n});\n\nexport type ShareImageAction = (base64Image: string) => ShareImageActionResponse;\nexport type ShareImageActionResponse = {\n  type: SHARE_IMAGE,\n  base64Image: string,\n};\n\nexport const shareImageAction: ShareImageAction = (base64Image: string) => ({\n  type: SHARE_IMAGE,\n  base64Image,\n});\n\nexport type SetSharedImageAction = (sharedImage: Image) => SetSharedImageActionResponse;\nexport type SetSharedImageActionResponse = {\n  type: SET_SHARED_IMAGE,\n  sharedImage: Image,\n};\n\nexport const setSharedImageAction: SetSharedImageAction = (sharedImage: Image) => ({\n  type: SET_SHARED_IMAGE,\n  sharedImage,\n});\n\nexport type SetIsLoadingAction = (isLoading: boolean) => SetIsLoadingActionResponse;\nexport type SetIsLoadingActionResponse = {\n  type: SET_IS_LOADING,\n  isLoading: boolean,\n};\n\nexport const setIsLoadingAction: SetIsLoadingAction = (isLoading: boolean) => ({\n  type: SET_IS_LOADING,\n  isLoading,\n});\n\nexport type Action = SetPreviewImageSrcActionResponse | ShareImageActionResponse | SetSharedImageActionResponse | SetIsLoadingActionResponse;\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { UPLOAD_IMAGE } from './constants';\nimport { UploadImageActionResponse } from './actions';\nimport { readAsDataURL } from '../utils';\nimport { setPreviewImageSrcAction } from '../preview/actions';\nimport { push } from 'connected-react-router';\nimport { Routes } from '../routes';\n\nexport function* uploadImage(action: UploadImageActionResponse): SagaIterator {\n  try {\n    const { image } = action;\n    const result = yield call(readAsDataURL, image);\n    if (result) {\n      yield put(setPreviewImageSrcAction(result));\n      yield put(push(Routes.preview));\n    }\n  } catch (e) {\n    console.error(e.message);\n  }\n}\nfunction* saga(): SagaIterator {\n  yield takeLatest(UPLOAD_IMAGE, uploadImage);\n}\nexport default saga;\n","export type UPLOAD_IMAGE = 'UPLOAD_IMAGE';\nexport const UPLOAD_IMAGE: UPLOAD_IMAGE = 'UPLOAD_IMAGE';\n","import { FetchGalleryResponse, PostImageResponse } from '../../types';\n\nexport const fetcher = async <T>(url: string, method: 'GET' | 'POST', headers = {}, body: {} | null = null): Promise<T> => {\n  const raw = await fetch(url, {\n    method,\n    body: body ? JSON.stringify(body) : null,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Client-ID c525fc8bfedf07e',\n      ...headers\n    },\n  });\n  return raw.json();\n};\n\nconst apiPath = 'https://api.imgur.com/3';\n\nexport const fetchGallery: (page: number) =>\n  Promise<FetchGalleryResponse> = async (page: number) =>\n  (await fetcher<FetchGalleryResponse>(`${apiPath}/gallery/r/aww/time/all/${page}`, 'GET'));\n\nexport const postImage: (base64Image: string) =>\n  Promise<PostImageResponse> = async (base64Image: string) =>\n  (await fetcher<PostImageResponse>(`${apiPath}/image`, 'POST', {}, { image: base64Image, type: 'jpg' }));\n","import { takeLatest, put, call } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { SHARE_IMAGE } from './constants';\nimport {\n  setIsLoadingAction,\n  setSharedImageAction,\n  ShareImageActionResponse\n} from './actions';\nimport { postImage } from '../fetcher';\nimport { isResponseSuccessfull } from '../utils';\n\nexport function* shareImage(action: ShareImageActionResponse): SagaIterator {\n  try {\n    yield put(setIsLoadingAction(true));\n    const response = yield call(postImage, action.base64Image);\n    if (isResponseSuccessfull(response)) {\n      yield put(setSharedImageAction(response.data));\n    }\n    yield put(setIsLoadingAction(false));\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nfunction* saga(): SagaIterator {\n  yield takeLatest(SHARE_IMAGE, shareImage);\n}\n\nexport default saga;\n","import {\n  SET_PAGE,\n  FETCH_GALLERY,\n  SELECT_IMAGE,\n  SET_GALLERY,\n  SET_LAST_LOADED_PAGE,\n  SET_GALLERY_IS_LOADING\n} from './constants';\n\nexport type SetGalleryAction = (gallery: object[]) => SetGalleryActionResponse;\nexport type SetGalleryActionResponse = {\n  type: SET_GALLERY,\n  gallery: object[],\n};\n\nexport const setGalleryAction: SetGalleryAction = (gallery) => ({\n  type: SET_GALLERY,\n  gallery,\n});\n\nexport type FetchGalleryAction = () => FetchGalleryActionResponse;\nexport type FetchGalleryActionResponse = {\n  type: FETCH_GALLERY,\n};\n\nexport const fetchGalleryAction: FetchGalleryAction = () => ({\n  type: FETCH_GALLERY,\n});\n\nexport type SelectImageAction = (imageUrl: string) => SelectImageActionResponse;\nexport type SelectImageActionResponse = {\n  type: SELECT_IMAGE,\n  imageUrl: string,\n};\n\nexport const selectImageAction: SelectImageAction = (imageUrl) => ({\n  type: SELECT_IMAGE,\n  imageUrl,\n});\n\nexport type SetPageAction = (page: number) => SetPageActionResponse;\nexport type SetPageActionResponse = {\n  type: SET_PAGE,\n  page: number,\n};\n\nexport const setPageAction: SetPageAction = (page) => ({\n  type: SET_PAGE,\n  page,\n});\n\nexport type SetLastLoadedPageNumberAction = (lastLoadedPageNumber: number) => SetLastLoadedPageNumberActionResponse;\nexport type SetLastLoadedPageNumberActionResponse = {\n  type: SET_LAST_LOADED_PAGE,\n  lastLoadedPageNumber: number,\n};\n\nexport const setLastLoadedPageNumberAction: SetLastLoadedPageNumberAction = (lastLoadedPageNumber) => ({\n  type: SET_LAST_LOADED_PAGE,\n  lastLoadedPageNumber,\n});\n\nexport type SetGalleryIsLoadingAction = (isLoading: boolean) => SetGalleryIsLoadingActionResponse;\nexport type SetGalleryIsLoadingActionResponse = {\n  type: SET_GALLERY_IS_LOADING,\n  isLoading: boolean,\n};\n\nexport const setGalleryIsLoadingAction: SetGalleryIsLoadingAction = (isLoading) => ({\n  type: SET_GALLERY_IS_LOADING,\n  isLoading,\n});\n\n\nexport type Action = SetGalleryActionResponse | FetchGalleryActionResponse | SelectImageActionResponse | SetPageActionResponse | SetLastLoadedPageNumberActionResponse | SetGalleryIsLoadingActionResponse;\n","import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { fetchGallery } from '../fetcher';\nimport { FETCH_GALLERY, SELECT_IMAGE, SET_PAGE } from './constants';\nimport {\n  fetchGalleryAction,\n  SelectImageActionResponse,\n  setGalleryAction, setGalleryIsLoadingAction,\n  setLastLoadedPageNumberAction,\n  SetPageActionResponse\n} from './actions';\nimport { isResponseSuccessfull } from '../utils';\nimport { Image } from '../../types';\nimport { Routes } from '../routes';\nimport { push } from 'connected-react-router';\nimport { setPreviewImageSrcAction } from '../preview/actions';\nimport { selectGallerySize, selectLastLoadedPageNumber, selectPageSize } from './reducer';\n\nfunction* fetch(): SagaIterator {\n  try {\n    yield put(setGalleryIsLoadingAction(true))\n    /** fetch gallery */\n    const lastLoadedPage = yield select(selectLastLoadedPageNumber);\n    const currentPage = lastLoadedPage + 1;\n    const response = yield call(fetchGallery, currentPage);\n    if (isResponseSuccessfull(response)) {\n      /** Set last loaded imgur page */\n      yield put(setLastLoadedPageNumberAction(currentPage));\n      /** filter not animated */\n      const gallery = response.data.filter((image: Image) => !image.animated);\n      /** set to state */\n      yield put(setGalleryAction(gallery));\n      yield put(setGalleryIsLoadingAction(false))\n    }\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nfunction* selectImage(action: SelectImageActionResponse): SagaIterator {\n  try {\n    yield put(setPreviewImageSrcAction(action.imageUrl));\n    yield put(push(Routes.preview));\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nfunction* setPage(action: SetPageActionResponse): SagaIterator {\n  try {\n    const { page } = action;\n    const gallerySize = yield select(selectGallerySize);\n    const pageSize = yield select(selectPageSize);\n    if (gallerySize <= (page * pageSize)) {\n      yield put(fetchGalleryAction());\n    }\n\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nfunction* saga(): SagaIterator {\n  yield takeLatest(FETCH_GALLERY, fetch);\n  yield takeLatest(SELECT_IMAGE, selectImage);\n  yield takeLatest(SET_PAGE, setPage);\n}\n\nexport default saga;\n","import * as React from 'react';\n\nexport default () => (\n  <div>Generate mosaic from picture. You can:\n    <ul>\n      <li>Select picture from imgur <i>/r/aww/</i> gallery (newest first, animated posts filtered)</li>\n      <li>Upload your picture</li>\n    </ul>\n  </div>\n);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { uploadImageAction, UploadImageAction } from '../actions';\n\nexport type Props = {\n  uploadImage: UploadImageAction,\n};\n\n/**\n * Page with simple upload form\n */\nclass UploadPage extends React.Component<Props> {\n\n  /** Call saga on submit with uploaded file */\n  onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const target = e.target as HTMLFormElement;\n    const file = target.image.files[0];\n    this.props.uploadImage(file);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Upload your favourite picture</h1>\n        <form onSubmit={this.onSubmit}>\n          <input type=\"file\" accept=\"image/png, image/jpeg\" name=\"image\"/>\n          <button type=\"submit\">Upload</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  () => ({}),\n  {\n    uploadImage: uploadImageAction,\n  }\n)(UploadPage);\n","import { UPLOAD_IMAGE } from './constants';\n\nexport type UploadImageAction = (image: File) => UploadImageActionResponse;\nexport type UploadImageActionResponse = {\n  type: UPLOAD_IMAGE,\n  image: File,\n};\n\nexport const uploadImageAction: UploadImageAction = (image: File) => ({\n  type: UPLOAD_IMAGE,\n  image,\n});\n\nexport type Action = UploadImageActionResponse;\n","import * as React from 'react';\nimport {getAverageColor, loadImage} from '../../utils';\nimport {selectIsLoading, selectPreviewImageSrc, selectSharedImage} from '../reducer';\nimport {Image, State} from '../../../types';\nimport {connect} from 'react-redux';\nimport {SetIsLoadingAction, setIsLoadingAction, ShareImageAction, shareImageAction} from '../actions';\nimport {Button, Spin} from \"antd\";\n\nconst CIRCLE_SIZE = 16;\n\nexport type Props = {\n  previewImageSrc?: string,\n  sharedImage?: Image,\n  shareImage: ShareImageAction,\n  shareIsLoading: boolean,\n  setIsLoading: SetIsLoadingAction,\n};\n\n/**\n * HTML canvas component that can transform image into mosaic\n */\nclass Canvas extends React.Component<Props, { loading: boolean }> {\n  canvas: HTMLCanvasElement | null = null;\n  state = {loading: false}\n\n  async componentDidMount() {\n    const {previewImageSrc} = this.props;\n    if (previewImageSrc) {\n      await this.setImageIntoCanvas(previewImageSrc);\n    }\n  }\n\n  async componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.previewImageSrc && nextProps.previewImageSrc !== this.props.previewImageSrc) {\n      await this.setImageIntoCanvas(nextProps.previewImageSrc);\n    }\n  }\n\n  /** Setting image from source to canvas */\n  setImageIntoCanvas = async (imageSrc: string) => {\n    if (this.canvas) {\n      const context = this.canvas.getContext('2d');\n      if (context) {\n        this.props.setIsLoading(true);\n        const image = await loadImage(imageSrc);\n        if (this.canvas) {\n          this.canvas.width = Math.floor(image.width / CIRCLE_SIZE) * CIRCLE_SIZE;\n          this.canvas.height = Math.floor(image.height / CIRCLE_SIZE) * CIRCLE_SIZE;\n        }\n        context.drawImage(image, 0, 0, image.width, image.height);\n        this.props.setIsLoading(false);\n      }\n    }\n  }\n\n  setMosaicToCanvas = () => {\n    if (!this.canvas) {\n      return;\n    }\n\n    const context = this.canvas.getContext('2d');\n    if (!context) {\n      return;\n    }\n\n    const {width, height} = this.canvas;\n\n    let sx = 0;\n    let row = 0;\n    let imageData = context.getImageData(sx, row * CIRCLE_SIZE, CIRCLE_SIZE, CIRCLE_SIZE);\n\n    while (Math.floor(height / CIRCLE_SIZE) >= row) {\n      /** Compute average color */\n      const avg = getAverageColor(imageData);\n      /** Clear original image */\n      const clearedSquare = context.createImageData(CIRCLE_SIZE, CIRCLE_SIZE);\n      context.putImageData(clearedSquare, sx, row * CIRCLE_SIZE);\n      /** Draw circle with average color */\n      const radius = CIRCLE_SIZE / 2;\n      context.beginPath();\n      context.arc(sx + radius, row * CIRCLE_SIZE + radius, radius, 0, 2 * Math.PI);\n      context.fillStyle = `rgb(${avg.red}, ${avg.green}, ${avg.blue})`;\n      context.fill();\n\n      sx += CIRCLE_SIZE;\n      if (sx >= width) {\n        sx = 0;\n        row += 1;\n      }\n      /** Get another 16x16px square */\n      imageData = context.getImageData(sx, row * CIRCLE_SIZE, CIRCLE_SIZE, CIRCLE_SIZE);\n    }\n\n    this.setState({loading: false})\n  }\n\n  /** Share image to imgur */\n  share = () => {\n    if (this.canvas) {\n      const {shareImage} = this.props;\n      const base64Image = this.canvas.toDataURL().replace('data:image/png;base64,', '');\n      shareImage(base64Image);\n    }\n  }\n\n  /** Generate mosaic from original image */\n  generate = () => {\n    this.setState({loading: true})\n    setTimeout(this.setMosaicToCanvas, 0)\n  }\n\n  render() {\n    const {previewImageSrc, sharedImage, shareIsLoading} = this.props;\n    if (previewImageSrc) {\n      return (\n        <>\n          <Button.Group>\n            <Button loading={this.state.loading} onClick={() => this.generate()}>Generate Mosaic</Button>\n            <Button loading={shareIsLoading} onClick={() => this.share()}>​ Share</Button>\n          </Button.Group>\n          {sharedImage &&\n          <span>Shared on Imgur <a href={sharedImage.link} target=\"_blank\" rel=\"noopener noreferrer\">HERE</a></span>}\n\n          <Spin spinning={this.state.loading}>\n            <canvas ref={(canvas) => this.canvas = canvas}/>\n          </Spin>\n        </>\n      );\n    } else {\n      return (\n        <div>There is nothing to see, first upload or select image.</div>\n      );\n    }\n  }\n}\n\nexport default connect(\n  (state: State) => ({\n    previewImageSrc: selectPreviewImageSrc(state),\n    sharedImage: selectSharedImage(state),\n    shareIsLoading: selectIsLoading(state),\n  }),\n  {\n    shareImage: shareImageAction,\n    setIsLoading: setIsLoadingAction,\n  }\n)(Canvas);\n","import * as React from 'react';\nimport Canvas from './Canvas';\n\n/**\n * Component for displaying images, wrapper for <Canvas />\n */\nexport default () => (<Canvas />);\n","import React from 'react';\nimport {useState} from \"react\";\nimport {Spin} from \"antd\";\n\nexport type Props = {\n  src: string,\n  className?: string,\n  onClick?: () => void,\n};\n\nconst Image = ({src, onClick}: Props) => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const onLoad = () => {\n    setIsLoading(false)\n  }\n\n  return (\n    <Spin spinning={isLoading}>\n      <div style={{overflow: \"hidden\", width: '200px', height: '200px'}} onClick={onClick}>\n        <img\n          width=\"100%\"\n          alt=\"\"\n          src={src}\n          onLoad={onLoad}\n        />\n      </div>\n    </Spin>\n  );\n}\n\nexport default Image;\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {Gallery, State} from '../../../types';\nimport {selectGallery, selectGalleryIsLoading, selectPage} from '../reducer';\nimport {\n  FetchGalleryAction,\n  fetchGalleryAction,\n  SelectImageAction,\n  selectImageAction, SetPageAction,\n  setPageAction\n} from '../actions';\nimport Image from './Image';\nimport {List} from \"antd\";\n\nexport type Props = {\n  gallery: Gallery,\n  fetchGallery: FetchGalleryAction,\n  selectImage: SelectImageAction,\n  setPage: SetPageAction,\n  page: number,\n  isLoading: boolean,\n};\n\nexport class GalleryPage extends React.Component<Props> {\n  componentDidMount() {\n    this.props.fetchGallery();\n  }\n\n  render() {\n    const {gallery, setPage, page, selectImage, isLoading} = this.props;\n\n    return (\n      <div>\n        <h1>Click on your favourite picture</h1>\n        <List\n          loading={isLoading}\n          grid={{\n            gutter: 16,\n            xs: 1,\n            sm: 2,\n            md: 4,\n            lg: 4,\n            xl: 6,\n            xxl: 3,\n          }}\n          dataSource={gallery}\n          renderItem={image => (\n            <List.Item>\n              <Image\n                key={image.id}\n                src={image.link}\n                onClick={() => selectImage(image.link)}\n              />\n            </List.Item>\n          )}\n        />\n        <div>\n          <button disabled={page === 1} onClick={() => setPage(page - 1)}>Previous</button>\n          <span>{page}</span>\n          <button onClick={() => setPage(page + 1)}>Next</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state: State) => ({\n    gallery: selectGallery(state),\n    page: selectPage(state),\n    isLoading: selectGalleryIsLoading(state),\n  }),\n  {\n    fetchGallery: fetchGalleryAction,\n    selectImage: selectImageAction,\n    setPage: setPageAction,\n  }\n)(GalleryPage);\n","import * as React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { Routes } from '../routes';\nimport HomePage from '../home/components/HomePage';\nimport UploadPage from '../upload/components/UploadPage';\nimport PreviewPage from '../preview/components/PreviewPage';\nimport GalleryPage from '../gallery/components/GalleryPage';\nimport {Menu} from \"antd\";\n\nexport default () => (\n  <div>\n    <Menu theme=\"dark\" selectedKeys={[]} mode=\"horizontal\">\n      <Menu.Item>\n        <Link to={Routes.home}>Home</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to={Routes.selectImage}>Select Image</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to={Routes.upload}>Upload</Link>\n      </Menu.Item>\n    </Menu>\n    <div>\n      <Switch>\n        <Route exact={true} path={Routes.home} component={HomePage}/>\n        <Route path={Routes.selectImage} component={GalleryPage}/>\n        <Route path={Routes.upload} component={UploadPage}/>\n        <Route path={Routes.preview} component={PreviewPage}/>\n      </Switch>\n    </div>\n  </div>\n);\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport createHistory from 'history/createBrowserHistory';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport getStore from './getStore';\nimport getSaga from './getSaga';\n\nimport App from './modules/app/App';\nimport { appMountedAction } from './modules/app/actions';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nconst history = createHistory();\nconst store = getStore(history);\n\nstore.runSaga(getSaga());\n\nReactDOM.render(\n  <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App/>\n      </ConnectedRouter>\n    </Provider>,\n  document.getElementById('root') as HTMLElement,\n  () => {\n      // @ts-ignore\n      store.dispatch(appMountedAction());\n  }\n);\n","import { fork } from 'redux-saga/effects';\nimport uploadSaga from './modules/upload/saga';\nimport previewSaga from './modules/preview/saga';\nimport gallerySaga from './modules/gallery/saga';\n\nexport default () => function* rootSaga() {\n  const sagas = [\n    yield fork(uploadSaga),\n    yield fork(previewSaga),\n    yield fork(gallerySaga),\n  ];\n  yield sagas;\n};\n","import { APP_MOUNTED } from './constants';\n\nexport type AppMountedActionResponse = { type: APP_MOUNTED };\ntype AppMountedAction = () => AppMountedActionResponse;\n\nexport const appMountedAction: AppMountedAction = () => ({\n  type: APP_MOUNTED\n});\n","export type APP_MOUNTED = 'APP_MOUNTED';\nexport const APP_MOUNTED: APP_MOUNTED = 'APP_MOUNTED';\n"],"sourceRoot":""}